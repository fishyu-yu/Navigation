# =============================================================================
# 自动化更新脚本配置文件
# Auto-Update Script Configuration
# =============================================================================

# GitHub仓库配置
# GitHub Repository Configuration
GITHUB_OWNER="your-username"
GITHUB_REPO="navigation-system"
GITHUB_BRANCH="main"
GITHUB_TOKEN=""  # 可选，用于私有仓库或提高API限制

# 本地项目配置
# Local Project Configuration
PROJECT_ROOT="/path/to/your/project"
BACKUP_DIR="${PROJECT_ROOT}/backups"
LOG_DIR="${PROJECT_ROOT}/logs"
TMP_DIR="${PROJECT_ROOT}/tmp"

# 更新行为配置
# Update Behavior Configuration
AUTO_BACKUP=true              # 是否自动备份
AUTO_RESTART=true             # 是否自动重启服务
SKIP_DEPENDENCY_CHECK=false   # 是否跳过依赖检查
FORCE_UPDATE=false            # 是否强制更新（忽略本地修改）

# 备份配置
# Backup Configuration
BACKUP_RETENTION_DAYS=30      # 备份保留天数
MAX_BACKUP_COUNT=10           # 最大备份数量
COMPRESS_BACKUPS=true         # 是否压缩备份文件

# 日志配置
# Logging Configuration
LOG_LEVEL="INFO"              # 日志级别: DEBUG, INFO, WARN, ERROR
LOG_RETENTION_DAYS=7          # 日志保留天数
MAX_LOG_SIZE="100M"           # 单个日志文件最大大小

# 网络配置
# Network Configuration
CONNECTION_TIMEOUT=30         # 连接超时时间（秒）
DOWNLOAD_TIMEOUT=300          # 下载超时时间（秒）
RETRY_COUNT=3                 # 重试次数
RETRY_DELAY=5                 # 重试间隔（秒）

# 安全配置
# Security Configuration
VERIFY_CHECKSUMS=true         # 是否验证文件校验和
VERIFY_SIGNATURES=false       # 是否验证数字签名
ALLOW_DOWNGRADE=false         # 是否允许版本降级

# 服务配置
# Service Configuration
SERVICE_NAME="navigation"      # 服务名称
SERVICE_PORT=3000             # 服务端口
HEALTH_CHECK_URL="http://localhost:3000/health"  # 健康检查URL
HEALTH_CHECK_TIMEOUT=30       # 健康检查超时时间（秒）

# 钩子脚本配置
# Hook Scripts Configuration
PRE_UPDATE_HOOK="${SCRIPT_DIR}/pre-update.sh"    # 更新前钩子
POST_UPDATE_HOOK="${SCRIPT_DIR}/post-update.sh"  # 更新后钩子
ENABLE_HOOKS=true             # 是否启用钩子脚本

# 通知配置
# Notification Configuration
ENABLE_NOTIFICATIONS=false    # 是否启用通知
NOTIFY_ON_SUCCESS=true        # 成功时是否通知
NOTIFY_ON_ERROR=true          # 错误时是否通知

# 邮件通知配置（如果启用）
# Email Notification Configuration
SMTP_SERVER=""
SMTP_PORT=587
SMTP_USERNAME=""
SMTP_PASSWORD=""
SMTP_FROM=""
SMTP_TO=""

# Slack通知配置（如果启用）
# Slack Notification Configuration
SLACK_WEBHOOK_URL=""
SLACK_CHANNEL="#updates"

# 高级配置
# Advanced Configuration
PARALLEL_DOWNLOADS=false      # 是否并行下载
USE_DELTA_UPDATES=false       # 是否使用增量更新
CACHE_DOWNLOADS=true          # 是否缓存下载文件
CLEANUP_ON_EXIT=true          # 退出时是否清理临时文件

# 开发者选项
# Developer Options
DEBUG_MODE=false              # 调试模式
DRY_RUN=false                 # 干运行模式（仅模拟，不实际执行）
VERBOSE_OUTPUT=false          # 详细输出
SKIP_TESTS=false              # 是否跳过测试

# 系统兼容性配置
# System Compatibility Configuration
DETECT_OS=true                # 是否自动检测操作系统
FORCE_LINUX_MODE=false        # 是否强制Linux模式
USE_SUDO=false                # 是否使用sudo执行某些操作

# 性能配置
# Performance Configuration
MAX_CONCURRENT_OPERATIONS=3   # 最大并发操作数
MEMORY_LIMIT="512M"           # 内存限制
DISK_SPACE_THRESHOLD="1G"     # 磁盘空间阈值

# =============================================================================
# 配置验证规则
# Configuration Validation Rules
# =============================================================================

# 必需的配置项
# Required Configuration Items
REQUIRED_CONFIGS=(
    "GITHUB_OWNER"
    "GITHUB_REPO"
    "PROJECT_ROOT"
)

# 数值配置的范围限制
# Numeric Configuration Limits
MIN_BACKUP_RETENTION_DAYS=1
MAX_BACKUP_RETENTION_DAYS=365
MIN_CONNECTION_TIMEOUT=5
MAX_CONNECTION_TIMEOUT=300
MIN_RETRY_COUNT=0
MAX_RETRY_COUNT=10

# =============================================================================
# 环境特定配置
# Environment Specific Configuration
# =============================================================================

# 开发环境配置
# Development Environment
if [[ "${ENVIRONMENT:-}" == "development" ]]; then
    DEBUG_MODE=true
    VERBOSE_OUTPUT=true
    SKIP_TESTS=false
    LOG_LEVEL="DEBUG"
fi

# 生产环境配置
# Production Environment
if [[ "${ENVIRONMENT:-}" == "production" ]]; then
    DEBUG_MODE=false
    VERBOSE_OUTPUT=false
    SKIP_TESTS=true
    LOG_LEVEL="INFO"
    VERIFY_CHECKSUMS=true
    ENABLE_NOTIFICATIONS=true
fi

# 测试环境配置
# Testing Environment
if [[ "${ENVIRONMENT:-}" == "testing" ]]; then
    DRY_RUN=true
    SKIP_TESTS=false
    LOG_LEVEL="DEBUG"
    AUTO_RESTART=false
fi